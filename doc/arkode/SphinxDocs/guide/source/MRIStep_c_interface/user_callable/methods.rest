.. _MRIStep_CInterface.MRIStepMethodInputTable:

Optional inputs for IVP method selection
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. cssclass:: table-bordered

=================================  =================================  ==============
Optional input                     Function name                      Default
=================================  =================================  ==============
Set MRI outer RK table             :c:func:`MRIStepSetTable()`        internal
Specify MRI outer RK table number  :c:func:`MRIStepSetTableNum()`     internal
=================================  =================================  ==============

.. Set integrator method order        :c:func:`MRIStepSetOrder()`        3


..
   .. c:function:: int MRIStepSetOrder(void* arkode_mem, int ord)

      Specifies the order of accuracy for the ERK integration method.

      **Arguments:**
         * *arkode_mem* -- pointer to the MRIStep memory block.
         * *ord* -- requested order of accuracy.

      **Return value:**
         * *ARK_SUCCESS* if successful
         * *ARK_MEM_NULL* if the MRIStep memory is ``NULL``
         * *ARK_ILL_INPUT* if an argument has an illegal value

      **Notes:** The allowed values are :math:`2 \le` *ord* :math:`\le
      8`.  Any illegal input will result in the default value of 4.

      Since *ord* affects the memory requirements for the internal
      MRIStep memory block, it cannot be changed after the first call to
      :c:func:`MRIStepEvolve()`, unless :c:func:`MRIStepReInit()` is called.



.. c:function:: int MRIStepSetTable(void* arkode_mem, int q, ARKodeButcherTable B)

   Specifies a customized Butcher table for the MRI outer (slow) method.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *q* -- global order of accuracy for the MRI method.
      * *B* -- the Butcher table for the outer (slow) RK method.

   **Return value:**
      * *ARK_SUCCESS* if successful
      * *ARK_MEM_NULL* if the MRIStep memory is ``NULL``
      * *ARK_ILL_INPUT* if an argument has an illegal value

   **Notes:**

   For a description of the :c:type:`ARKodeButcherTable` type and related
   functions for creating Butcher tables see :ref:`ARKodeButcherTable`.

   At this time the outer (slow) Butcher table must define an explicit Runge-Kutta
   method. Additionally, the outer table must have stage times that are unique
   and ordered (i.e., :math:`c^s_{i} > c^s_{i-1}`) and the final stage time must
   be less than 1. Error checking is performed to ensure that *B* defines an ERK
   method (i.e., the *A* component of *B* is strictly lower-triangular) and the
   stage times of *B* satisfy the aforementioned restrictions.

   The input value of *q* is used rather than the order encoded in the
   Butcher table as the overall order of the MRI method may differ from
   the order of the outer table. No error checking is performed to ensure
   that *p* correctly describes the coefficients that were input.



.. c:function:: int MRIStepSetMRITableNum(void* arkode_mem, int itable)

   Indicates to use specific built-in Butcher table for the MRI outer (slow) method.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *itable* -- index of the outer (slow) Butcher table.

   **Return value:**
      * *ARK_SUCCESS* if successful
      * *ARK_MEM_NULL* if the MRIStep memory is ``NULL``
      * *ARK_ILL_INPUT* if an argument has an illegal value

   **Notes:** *itable* should match existing explicit methods
   from the section :ref:`Butcher.explicit`. Error-checking is performed
   to ensure that this tables exists, is not implicit, and satisfies the
   restrictions listed above for :c:func:`MRIStepSetTable()`.
