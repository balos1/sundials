.. _MRIStep_CInterface.OptionalOutputs:

Optional output functions
------------------------------

MRIStep provides an extensive set of functions that can be used to
obtain solver performance information.  We organize these into groups:

1. SUNDIALS version information accessor routines are in the subsection
   :ref:`MRIStep_CInterface.SUNVersionInfo`,
2. General MRIStep output routines are in the subsection
   :ref:`MRIStep_CInterface.MRIStepMainOutputs`,
3. MRIStep implicit solver output routines are in the subsection
   :ref:`MRIStep_CInterface.MRIStepImplicitSolverOutputs`,
4. Linear solver output routines are in the subsection
   :ref:`MRIStep_CInterface.ARKLsOutputs` and
5. General usability routines (e.g. to print the current MRIStep
   parameters, or output the current coupling table) are in the
   subsection :ref:`MRIStep_CInterface.MRIStepExtraOutputs`.
6. Output routines regarding root-finding results are in the subsection
   :ref:`MRIStep_CInterface.MRIStepRootOutputs`,

Following each table, we elaborate on each function.

Some of the optional outputs, especially the various counters, can be
very useful in determining the efficiency of various methods inside
MRIStep.  For example:

* The number of steps and right-hand side evaluations at both the slow and fast
  time scales provide a rough measure of the overall cost of a given run, and can
  be compared between runs with different solver options to suggest which set of
  options is the most efficient.

* The ratio *nniters/nsteps* measures the performance of the
  nonlinear iteration in solving the nonlinear systems at each implicit stage,
  providing a measure of the degree of nonlinearity in the problem.
  Typical values of this for a Newton solver on a general problem
  range from 1.1 to 1.8.

* When using a Newton nonlinear solver, the ratio *njevals/nniters*
  (in the case of a direct linear solver), and the ratio
  *npevals/nniters* (in the case of an iterative linear solver)
  can measure the overall degree of nonlinearity in the problem,
  since these are updated infrequently, unless the Newton method
  convergence slows.

* When using a Newton nonlinear solver, the ratio *njevals/nniters*
  (when using a direct linear solver), and the ratio
  *nliters/nniters* (when using an iterative linear solver) can
  indicate the quality of the approximate Jacobian or preconditioner being
  used.  For example, if this ratio is larger for a user-supplied
  Jacobian or Jacobian-vector product routine than for the
  difference-quotient routine, it can indicate that the user-supplied
  Jacobian is inaccurate.

It is therefore recommended that users retrieve and output these
statistics following each run, and take some time to investigate
alternate solver options that will be more optimal for their
particular problem of interest.



.. _MRIStep_CInterface.SUNVersionInfo:

SUNDIALS version information
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following functions provide a way to get SUNDIALS version
information at runtime.


.. c:function:: int SUNDIALSGetVersion(char *version, int len)

   This routine fills a string with SUNDIALS version information.

   **Arguments:**
      * *version* -- character array to hold the SUNDIALS version information.
      * *len* -- allocated length of the *version* character array.

   **Return value:**
      * 0 if successful
      * -1 if the input string is too short to store the SUNDIALS version

   **Notes:** An array of 25 characters should be sufficient to hold
   the version information.



.. c:function:: int SUNDIALSGetVersionNumber(int *major, int *minor, int *patch, char *label, int len)

   This routine sets integers for the SUNDIALS major,
   minor, and patch release numbers and fills a string with the
   release label if applicable.

   **Arguments:**
      * *major* -- SUNDIALS release major version number.
      * *minor* -- SUNDIALS release minor version number.
      * *patch* -- SUNDIALS release patch version number.
      * *label* -- string to hold the SUNDIALS release label.
      * *len* -- allocated length of the *label* character array.

   **Return value:**
      * 0 if successful
      * -1 if the input string is too short to store the SUNDIALS label

   **Notes:** An array of 10 characters should be sufficient to hold
   the label information. If a label is not used in the release
   version, no information is copied to *label*.


.. _MRIStep_CInterface.MRIStepMainOutputs:

Main solver optional output functions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. cssclass:: table-bordered

===================================================  ============================================
Optional output                                      Function name
===================================================  ============================================
Size of MRIStep real and integer workspaces          :c:func:`MRIStepGetWorkSpace()`
Cumulative number of internal steps                  :c:func:`MRIStepGetNumSteps()`
Step size used for the last successful step          :c:func:`MRIStepGetLastStep()`
Current internal time reached by the solver          :c:func:`MRIStepGetCurrentTime()`
Current internal solution reached by the solver      :c:func:`MRIStepGetCurrentState()`
Current :math:`\gamma` value used by the solver      :c:func:`MRIStepGetCurrentGamma()`
Error weight vector for state variables              :c:func:`MRIStepGetErrWeights()`
Suggested factor for tolerance scaling               :c:func:`MRIStepGetTolScaleFactor()`
Name of constant associated with a return flag       :c:func:`MRIStepGetReturnFlagName()`
No. of calls to the *fs* function                    :c:func:`MRIStepGetNumRhsEvals()`
Current MRI coupling tables                          :c:func:`MRIStepGetCurrentCoupling()`
Last inner stepper return value                      :c:func:`MRIStepGetLastInnerStepFlag()`
===================================================  ============================================

.. Functions not currently provided by MRIStep
.. No. of explicit stability-limited steps              :c:func:`MRIStepGetNumExpSteps()`
.. No. of accuracy-limited steps                        :c:func:`MRIStepGetNumAccSteps()`
.. No. of attempted steps                               :c:func:`MRIStepGetNumStepAttempts()`
.. No. of local error test failures that have occurred  :c:func:`MRIStepGetNumErrTestFails()`
.. Estimated local truncation error vector              :c:func:`MRIStepGetEstLocalErrors()`
.. Single accessor to many statistics at once           :c:func:`MRIStepGetTimestepperStats()`
.. Actual initial time step size used                   :c:func:`MRIStepGetActualInitStep()`
.. Step size to be attempted on the next step           :c:func:`MRIStepGetCurrentStep()`
.. Single accessor to many statistics at once           :c:func:`MRIStepGetStepStats()`

.. c:function:: int MRIStepGetWorkSpace(void* arkode_mem, long int* lenrw, long int* leniw)

   Returns the MRIStep real and integer workspace sizes.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *lenrw* -- the number of ``realtype`` values in the MRIStep workspace.
      * *leniw* -- the number of integer values in the MRIStep workspace.

   **Return value:**
      * *ARK_SUCCESS* if successful
      * *ARK_MEM_NULL* if the MRIStep memory was ``NULL``


.. c:function:: int MRIStepGetNumSteps(void* arkode_mem, long int* nssteps, long int* nfsteps)

   Returns the cumulative number of slow and fast internal steps taken by
   the solver (so far).

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *nssteps* -- number of slow steps taken in the solver.
      * *nfsteps* -- number of fast steps taken in the solver.

   **Return value:**
      * *ARK_SUCCESS* if successful
      * *ARK_MEM_NULL* if the MRIStep memory was ``NULL``


..
   .. c:function:: int MRIStepGetActualInitStep(void* arkode_mem, realtype* hinused)

      Returns the value of the integration step size used on the first step.

      **Arguments:**
         * *arkode_mem* -- pointer to the MRIStep memory block.
         * *hinused* -- actual value of initial step size.

      **Return value:**
         * *ARK_SUCCESS* if successful
         * *ARK_MEM_NULL* if the MRIStep memory was ``NULL``


.. c:function:: int MRIStepGetLastStep(void* arkode_mem, realtype* hlast)

   Returns the integration step size taken on the last successful
   internal step.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *hlast* -- step size taken on the last internal step.

   **Return value:**
      * *ARK_SUCCESS* if successful
      * *ARK_MEM_NULL* if the MRIStep memory was ``NULL``


..
   .. c:function:: int MRIStepGetCurrentStep(void* arkode_mem, realtype* hcur)

      Returns the integration step size to be attempted on the next internal step.

      **Arguments:**
         * *arkode_mem* -- pointer to the MRIStep memory block.
         * *hcur* -- step size to be attempted on the next internal step.

      **Return value:**
         * *ARK_SUCCESS* if successful
         * *ARK_MEM_NULL* if the MRIStep memory was ``NULL``


.. c:function:: int MRIStepGetCurrentTime(void* arkode_mem, realtype* tcur)

   Returns the current internal time reached by the solver.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *tcur* -- current internal time reached.

   **Return value:**
      * *ARK_SUCCESS* if successful
      * *ARK_MEM_NULL* if the MRIStep memory was ``NULL``


.. c:function:: int MRIStepGetCurrentState(void *arkode_mem, N_Vector *ycur)

   Returns the current internal solution reached by the solver.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *ycur* -- current internal solution.

   **Return value:**
      * *ARK_SUCCESS* if successful
      * *ARK_MEM_NULL* if the MRIStep memory was ``NULL``

   **Notes:** Users should exercise extreme caution when using this function,
   as altering values of *ycur* may lead to undesirable behavior, depending
   on the particular use case and on when this routine is called.


.. c:function:: int MRIStepGetCurrentGamma(void *arkode_mem, realtype *gamma)

   Returns the current internal value of :math:`\gamma` used in the implicit
   solver Newton matrix (see equation :eq:`NewtonMatrix`).

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *gamma* -- current step size scaling factor in the Newton system.

   **Return value:**
      * *ARK_SUCCESS* if successful
      * *ARK_MEM_NULL* if the MRIStep memory was ``NULL``



.. c:function:: int MRIStepGetTolScaleFactor(void* arkode_mem, realtype* tolsfac)

   Returns a suggested factor by which the user's
   tolerances should be scaled when too much accuracy has been
   requested for some internal step.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *tolsfac* -- suggested scaling factor for user-supplied tolerances.

   **Return value:**
      * *ARK_SUCCESS* if successful
      * *ARK_MEM_NULL* if the MRIStep memory was ``NULL``


.. c:function:: int MRIStepGetErrWeights(void* arkode_mem, N_Vector eweight)

   Returns the current error weight vector.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *eweight* -- solution error weights at the current time.

   **Return value:**
      * *ARK_SUCCESS* if successful
      * *ARK_MEM_NULL* if the MRIStep memory was ``NULL``

   **Notes:** The user must allocate space for *eweight*, that will be
   filled in by this function.


..
   .. c:function:: int MRIStepGetStepStats(void* arkode_mem, long int* nssteps, long int* nfsteps, realtype* hlast, realtype* tcur)

      Returns many of the most useful optional outputs in a single call.

      **Arguments:**
         * *arkode_mem* -- pointer to the MRIStep memory block.
         * *nssteps* -- number of slow steps taken in the solver.
         * *nfsteps* -- number of fast steps taken in the solver.
         * *hlast* -- step size taken on the last internal step.
         * *tcur* -- current internal time reached.

      **Return value:**
         * *ARK_SUCCESS* if successful
         * *ARK_MEM_NULL* if the MRIStep memory was ``NULL``


.. c:function:: char *MRIStepGetReturnFlagName(long int flag)

   Returns the name of the MRIStep constant corresponding to *flag*.

   **Arguments:**
      * *flag* -- a return flag from an MRIStep function.

   **Return value:**
   The return value is a string containing the name of
   the corresponding constant.


..
   .. c:function:: int MRIStepGetNumExpSteps(void* arkode_mem, long int* expsteps)

      Returns the cumulative number of stability-limited steps
      taken by the solver (so far).

      **Arguments:**
         * *arkode_mem* -- pointer to the MRIStep memory block.
         * *expsteps* -- number of stability-limited steps taken in the solver.

      **Return value:**
         * *ARK_SUCCESS* if successful
         * *ARK_MEM_NULL* if the MRIStep memory was ``NULL``


..
   .. c:function:: int MRIStepGetNumAccSteps(void* arkode_mem, long int* accsteps)

      Returns the cumulative number of accuracy-limited steps
      taken by the solver (so far).

      **Arguments:**
         * *arkode_mem* -- pointer to the MRIStep memory block.
         * *accsteps* -- number of accuracy-limited steps taken in the solver.

      **Return value:**
         * *ARK_SUCCESS* if successful
         * *ARK_MEM_NULL* if the MRIStep memory was ``NULL``


..
   .. c:function:: int MRIStepGetNumStepAttempts(void* arkode_mem, long int* step_attempts)

      Returns the cumulative number of steps attempted by the solver (so far).

      **Arguments:**
         * *arkode_mem* -- pointer to the MRIStep memory block.
         * *step_attempts* -- number of steps attempted by solver.

      **Return value:**
         * *ARK_SUCCESS* if successful
         * *ARK_MEM_NULL* if the MRIStep memory was ``NULL``


.. c:function:: int MRIStepGetNumRhsEvals(void* arkode_mem, long int* nfs_evals)

   Returns the number of calls to the user's outer (slow) right-hand side function,
   :math:`fs` (so far).

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *nfs_evals* -- number of calls to the user's :math:`fs(t,y)` function.

   **Return value:**
      * *ARK_SUCCESS* if successful
      * *ARK_MEM_NULL* if the MRIStep memory was ``NULL``


..
   .. c:function:: int MRIStepGetNumErrTestFails(void* arkode_mem, long int* netfails)

      Returns the number of local error test failures that
      have occurred (so far).

      **Arguments:**
         * *arkode_mem* -- pointer to the MRIStep memory block.
         * *netfails* -- number of error test failures.

      **Return value:**
         * *ARK_SUCCESS* if successful
         * *ARK_MEM_NULL* if the MRIStep memory was ``NULL``


.. c:function:: int MRIStepGetCurrentCoupling(void* arkode_mem, MRIStepCoupling *C)

   Returns the MRI coupling table currently in use by the solver.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *C* -- pointer to slow-to-fast MRI coupling structure.

   **Return value:**
      * *ARK_SUCCESS* if successful
      * *ARK_MEM_NULL* if the MRIStep memory was ``NULL``

   **Notes:**  The *MRIStepCoupling* data structure is defined in
   the header file ``arkode/arkode_mristep.h``.  It is defined as a
   pointer to the following C structure:

   .. code-block:: c

      struct MRIStepCouplingMem {

         int nmat;        /* number of MRI coupling matrices             */
         int stages;      /* size of coupling matrices (stages * stages) */
         int q;           /* method order of accuracy                    */
         int p;           /* embedding order of accuracy                 */
         realtype ***G;   /* coupling matrices [nmat][stages][stages]    */
         realtype *c;     /* abcissae                                    */

       };
       typedef MRIStepCouplingMem *MRIStepCoupling;

   For more details see :ref:`MRIStepCoupling`.


..
   .. c:function:: int MRIStepGetEstLocalErrors(void* arkode_mem, N_Vector ele)

      Returns the vector of estimated local truncation errors
      for the current step.

      **Arguments:**
         * *arkode_mem* -- pointer to the MRIStep memory block.
         * *ele* -- vector of estimated local truncation errors.

      **Return value:**
         * *ARK_SUCCESS* if successful
         * *ARK_MEM_NULL* if the MRIStep memory was ``NULL``

      **Notes:**  The user must allocate space for *ele*, that will be
      filled in by this function.

      The values returned in *ele* are valid only after a successful call
      to :c:func:`MRIStepEvolve()` (i.e. it returned a non-negative value).

      The *ele* vector, together with the *eweight* vector from
      :c:func:`MRIStepGetErrWeights()`, can be used to determine how the
      various components of the system contributed to the estimated local
      error test.  Specifically, that error test uses the WRMS norm of a
      vector whose components are the products of the components of these
      two vectors.  Thus, for example, if there were recent error test
      failures, the components causing the failures are those with largest
      values for the products, denoted loosely as ``eweight[i]*ele[i]``.


..
   .. c:function:: int MRIStepGetTimestepperStats(void* arkode_mem, long int* expsteps, long int* accsteps, long int* step_attempts, long int* nf_evals, long int* netfails)

      Returns many of the most useful time-stepper statistics in a single call.

      **Arguments:**
         * *arkode_mem* -- pointer to the MRIStep memory block.
         * *expsteps* -- number of stability-limited steps taken in the solver.
         * *accsteps* -- number of accuracy-limited steps taken in the solver.
         * *step_attempts* -- number of steps attempted by the solver.
         * *nf_evals* -- number of calls to the user's :math:`f(t,y)` function.
         * *netfails* -- number of error test failures.

      **Return value:**
         * *ARK_SUCCESS* if successful
         * *ARK_MEM_NULL* if the MRIStep memory was ``NULL``

.. c:function:: int MRIStepGetLastInnerStepFlag(void* arkode_mem, int* flag)

   Returns the last return value from the inner stepper.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *flag* -- inner stepper return value.

   **Return value:**
      * *ARK_SUCCESS* if successful
      * *ARK_MEM_NULL* if the MRIStep memory was ``NULL``




.. _MRIStep_CInterface.MRIStepImplicitSolverOutputs:

Implicit solver optional output functions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. cssclass:: table-bordered

===================================================  ============================================
Optional output                                      Function name
===================================================  ============================================
No. of calls to linear solver setup function         :c:func:`MRIStepGetNumLinSolvSetups()`
No. of nonlinear solver iterations                   :c:func:`MRIStepGetNumNonlinSolvIters()`
No. of nonlinear solver convergence failures         :c:func:`MRIStepGetNumNonlinSolvConvFails()`
Single accessor to all nonlinear solver statistics   :c:func:`MRIStepGetNonlinSolvStats()`
===================================================  ============================================




.. c:function:: int MRIStepGetNumLinSolvSetups(void* arkode_mem, long int* nlinsetups)

   Returns the number of calls made to the linear solver's
   setup routine (so far).

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *nlinsetups* -- number of linear solver setup calls made.

   **Return value:**
      * *ARK_SUCCESS* if successful
      * *ARK_MEM_NULL* if the MRIStep memory was ``NULL``

   **Notes:** This is only accumulated for the 'life' of the nonlinear
   solver object; the counter is reset whenever a new nonlinear solver
   module is 'attached' to MRIStep, or when MRIStep is resized.


.. c:function:: int MRIStepGetNumNonlinSolvIters(void* arkode_mem, long int* nniters)

   Returns the number of nonlinear solver iterations performed (so far).

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *nniters* -- number of nonlinear iterations performed.

   **Return value:**
      * *ARK_SUCCESS* if successful
      * *ARK_MEM_NULL* if the MRIStep memory was ``NULL``
      * *ARK_NLS_OP_ERR* if the SUNNONLINSOL object returned a failure flag

   **Notes:** This is only accumulated for the 'life' of the nonlinear
   solver object; the counter is reset whenever a new nonlinear solver
   module is 'attached' to MRIStep, or when MRIStep is resized.



.. c:function:: int MRIStepGetNumNonlinSolvConvFails(void* arkode_mem, long int* nncfails)

   Returns the number of nonlinear solver convergence
   failures that have occurred (so far).

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *nncfails* -- number of nonlinear convergence failures.

   **Return value:**
      * *ARK_SUCCESS* if successful
      * *ARK_MEM_NULL* if the MRIStep memory was ``NULL``

   **Notes:** This is only accumulated for the 'life' of the nonlinear
   solver object; the counter is reset whenever a new nonlinear solver
   module is 'attached' to MRIStep, or when MRIStep is resized.



.. c:function:: int MRIStepGetNonlinSolvStats(void* arkode_mem, long int* nniters, long int* nncfails)

   Returns all of the nonlinear solver statistics in a single call.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *nniters* -- number of nonlinear iterations performed.
      * *nncfails* -- number of nonlinear convergence failures.

   **Return value:**
      * *ARK_SUCCESS* if successful
      * *ARK_MEM_NULL* if the MRIStep memory was ``NULL``
      * *ARK_NLS_OP_ERR* if the SUNNONLINSOL object returned a failure flag

   **Notes:** These are only accumulated for the 'life' of the
   nonlinear solver object; the counters are reset whenever a new
   nonlinear solver module is 'attached' to MRIStep, or when MRIStep is resized.




.. _MRIStep_CInterface.ARKLsOutputs:

Linear solver interface optional output functions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following optional outputs are available from the ARKLS
modules:
workspace requirements,
number of calls to the Jacobian routine,
number of calls to the implicit right-hand side routine for finite-difference Jacobian approximation or Jacobian-vector product approximation,
number of linear iterations,
number of linear convergence failures,
number of calls to the preconditioner setup and solve routines,
number of calls to the Jacobian-vector setup and product routines,
and last return value from an ARKLS function.
Note that, where the name of an output would otherwise conflict with the
name of an optional output from the main solver, a suffix LS (for
Linear Solver) has been added here (e.g. *lenrwLS*).



.. cssclass:: table-bordered

=================================================================  ========================================
Optional output                                                    Function name
=================================================================  ========================================
Size of real and integer workspaces                                :c:func:`MRIStepGetLinWorkSpace()`
No. of Jacobian evaluations                                        :c:func:`MRIStepGetNumJacEvals()`
No. of preconditioner evaluations                                  :c:func:`MRIStepGetNumPrecEvals()`
No. of preconditioner solves                                       :c:func:`MRIStepGetNumPrecSolves()`
No. of linear iterations                                           :c:func:`MRIStepGetNumLinIters()`
No. of linear convergence failures                                 :c:func:`MRIStepGetNumLinConvFails()`
No. of Jacobian-vector setup evaluations                           :c:func:`MRIStepGetNumJTSetupEvals()`
No. of Jacobian-vector product evaluations                         :c:func:`MRIStepGetNumJtimesEvals()`
No. of *fs* calls for finite diff. :math:`J` or :math:`Jv` evals.  :c:func:`MRIStepGetNumLinRhsEvals()`
Last return from a linear solver function                          :c:func:`MRIStepGetLastLinFlag()`
Name of constant associated with a return flag                     :c:func:`MRIStepGetLinReturnFlagName()`
=================================================================  ========================================



.. c:function:: int MRIStepGetLinWorkSpace(void* arkode_mem, long int* lenrwLS, long int* leniwLS)

   Returns the real and integer workspace used by the ARKLS linear solver interface.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *lenrwLS* -- the number of ``realtype`` values in the ARKLS workspace.
      * *leniwLS* -- the number of integer values in the ARKLS workspace.

   **Return value:**
      * *ARKLS_SUCCESS* if successful
      * *ARKLS_MEM_NULL* if the MRIStep memory was ``NULL``
      * *ARKLS_LMEM_NULL* if the linear solver memory was ``NULL``

   **Notes:** The workspace requirements reported by this routine
   correspond only to memory allocated within this interface and to
   memory allocated by the ``SUNLinearSolver`` object attached
   to it.  The template Jacobian matrix allocated by the user outside
   of ARKLS is not included in this report.

   In a parallel setting, the above values are global (i.e. summed over all
   processors).


.. c:function:: int MRIStepGetNumJacEvals(void* arkode_mem, long int* njevals)

   Returns the number of Jacobian evaluations.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *njevals* -- number of Jacobian evaluations.

   **Return value:**
      * *ARKLS_SUCCESS* if successful
      * *ARKLS_MEM_NULL* if the MRIStep memory was ``NULL``
      * *ARKLS_LMEM_NULL* if the linear solver memory was ``NULL``

   **Notes:** This is only accumulated for the 'life' of the linear
   solver object; the counter is reset whenever a new linear solver
   module is 'attached' to MRIStep, or when MRIStep is resized.


.. c:function:: int MRIStepGetNumPrecEvals(void* arkode_mem, long int* npevals)

   Returns the total number of preconditioner evaluations,
   i.e. the number of calls made to *psetup* with ``jok`` = ``SUNFALSE`` and
   that returned ``*jcurPtr`` = ``SUNTRUE``.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *npevals* -- the current number of calls to *psetup*.

   **Return value:**
      * *ARKLS_SUCCESS* if successful
      * *ARKLS_MEM_NULL* if the MRIStep memory was ``NULL``
      * *ARKLS_LMEM_NULL* if the linear solver memory was ``NULL``

   **Notes:** This is only accumulated for the 'life' of the linear
   solver object; the counter is reset whenever a new linear solver
   module is 'attached' to MRIStep, or when MRIStep is resized.


.. c:function:: int MRIStepGetNumPrecSolves(void* arkode_mem, long int* npsolves)

   Returns the number of calls made to the preconditioner
   solve function, *psolve*.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *npsolves* -- the number of calls to *psolve*.

   **Return value:**
      * *ARKLS_SUCCESS* if successful
      * *ARKLS_MEM_NULL* if the MRIStep memory was ``NULL``
      * *ARKLS_LMEM_NULL* if the linear solver memory was ``NULL``

   **Notes:** This is only accumulated for the 'life' of the linear
   solver object; the counter is reset whenever a new linear solver
   module is 'attached' to MRIStep, or when MRIStep is resized.


.. c:function:: int MRIStepGetNumLinIters(void* arkode_mem, long int* nliters)

   Returns the cumulative number of linear iterations.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *nliters* -- the current number of linear iterations.

   **Return value:**
      * *ARKLS_SUCCESS* if successful
      * *ARKLS_MEM_NULL* if the MRIStep memory was ``NULL``
      * *ARKLS_LMEM_NULL* if the linear solver memory was ``NULL``

   **Notes:** This is only accumulated for the 'life' of the linear
   solver object; the counter is reset whenever a new linear solver
   module is 'attached' to MRIStep, or when MRIStep is resized.


.. c:function:: int MRIStepGetNumLinConvFails(void* arkode_mem, long int* nlcfails)

   Returns the cumulative number of linear convergence failures.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *nlcfails* -- the current number of linear convergence failures.

   **Return value:**
      * *ARKLS_SUCCESS* if successful
      * *ARKLS_MEM_NULL* if the MRIStep memory was ``NULL``
      * *ARKLS_LMEM_NULL* if the linear solver memory was ``NULL``

   **Notes:** This is only accumulated for the 'life' of the linear
   solver object; the counter is reset whenever a new linear solver
   module is 'attached' to MRIStep, or when MRIStep is resized.


.. c:function:: int MRIStepGetNumJTSetupEvals(void* arkode_mem, long int* njtsetup)

   Returns the cumulative number of calls made to the user-supplied
   Jacobian-vector setup function, *jtsetup*.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *njtsetup* -- the current number of calls to *jtsetup*.

   **Return value:**
      * *ARKLS_SUCCESS* if successful
      * *ARKLS_MEM_NULL* if the MRIStep memory was ``NULL``
      * *ARKLS_LMEM_NULL* if the linear solver memory was ``NULL``

   **Notes:** This is only accumulated for the 'life' of the linear
   solver object; the counter is reset whenever a new linear solver
   module is 'attached' to MRIStep, or when MRIStep is resized.


.. c:function:: int MRIStepGetNumJtimesEvals(void* arkode_mem, long int* njvevals)

   Returns the cumulative number of calls made to the
   Jacobian-vector product function, *jtimes*.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *njvevals* -- the current number of calls to *jtimes*.

   **Return value:**
      * *ARKLS_SUCCESS* if successful
      * *ARKLS_MEM_NULL* if the MRIStep memory was ``NULL``
      * *ARKLS_LMEM_NULL* if the linear solver memory was ``NULL``

   **Notes:** This is only accumulated for the 'life' of the linear
   solver object; the counter is reset whenever a new linear solver
   module is 'attached' to MRIStep, or when MRIStep is resized.


.. c:function:: int MRIStepGetNumLinRhsEvals(void* arkode_mem, long int* nfevalsLS)

   Returns the number of calls to the user-supplied implicit
   right-hand side function :math:`f^S` for finite difference
   Jacobian or Jacobian-vector product approximation.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *nfevalsLS* -- the number of calls to the user implicit
        right-hand side function.

   **Return value:**
      * *ARKLS_SUCCESS* if successful
      * *ARKLS_MEM_NULL* if the MRIStep memory was ``NULL``
      * *ARKLS_LMEM_NULL* if the linear solver memory was ``NULL``

   **Notes:** The value *nfevalsLS* is incremented only if the default
   internal difference quotient function is used.

   This is only accumulated for the 'life' of the linear
   solver object; the counter is reset whenever a new linear solver
   module is 'attached' to MRIStep, or when MRIStep is resized.


.. c:function:: int MRIStepGetLastLinFlag(void* arkode_mem, long int* lsflag)

   Returns the last return value from an ARKLS routine.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *lsflag* -- the value of the last return flag from an
        ARKLS function.

   **Return value:**
      * *ARKLS_SUCCESS* if successful
      * *ARKLS_MEM_NULL* if the MRIStep memory was ``NULL``
      * *ARKLS_LMEM_NULL* if the linear solver memory was ``NULL``

   **Notes:** If the ARKLS setup function failed when using the
   ``SUNLINSOL_DENSE`` or ``SUNLINSOL_BAND`` modules, then the value
   of *lsflag* is equal to the column index (numbered from one) at
   which a zero diagonal element was encountered during the LU
   factorization of the (dense or banded) Jacobian matrix.  For all
   other failures, *lsflag* is negative.

   Otherwise, if the ARKLS setup function failed
   (:c:func:`MRIStepEvolve()` returned *ARK_LSETUP_FAIL*), then
   *lsflag* will be *SUNLS_PSET_FAIL_UNREC*, *SUNLS_ASET_FAIL_UNREC*
   or *SUNLS_PACKAGE_FAIL_UNREC*.

   If the ARKLS solve function failed (:c:func:`MRIStepEvolve()`
   returned *ARK_LSOLVE_FAIL*), then *lsflag* contains the error
   return flag from the ``SUNLinearSolver`` object, which will
   be one of:
   *SUNLS_MEM_NULL*, indicating that the ``SUNLinearSolver``
   memory is ``NULL``;
   *SUNLS_ATIMES_NULL*, indicating that a matrix-free iterative solver
   was provided, but is missing a routine for the matrix-vector product
   approximation,
   *SUNLS_ATIMES_FAIL_UNREC*, indicating an unrecoverable failure in
   the :math:`Jv` function;
   *SUNLS_PSOLVE_NULL*, indicating that an iterative linear solver was
   configured to use preconditioning, but no preconditioner solve
   routine was provided,
   *SUNLS_PSOLVE_FAIL_UNREC*, indicating that the preconditioner solve
   function failed unrecoverably;
   *SUNLS_GS_FAIL*, indicating a failure in the Gram-Schmidt procedure
   (SPGMR and SPFGMR only);
   *SUNLS_QRSOL_FAIL*, indicating that the matrix :math:`R` was found
   to be singular during the QR solve phase (SPGMR and SPFGMR only); or
   *SUNLS_PACKAGE_FAIL_UNREC*, indicating an unrecoverable failure in
   an external iterative linear solver package.


.. c:function:: char *MRIStepGetLinReturnFlagName(long int lsflag)

   Returns the name of the ARKLS constant corresponding to *lsflag*.

   **Arguments:**
      * *lsflag* -- a return flag from an ARKLS function.

   **Return value:**  The return value is a string containing the name of
   the corresponding constant. If using the ``SUNLINSOL_DENSE`` or
   ``SUNLINSOL_BAND`` modules, then if  1 :math:`\le` `lsflag`
   :math:`\le n` (LU factorization failed), this routine returns "NONE".




.. _MRIStep_CInterface.MRIStepExtraOutputs:

General usability functions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following optional routines may be called by a user to inquire
about existing solver parameters or write the current MRI coupling table. While
neither of these would typically be called during the course of solving an
initial value problem, these may be useful for users wishing to better
understand MRIStep.


.. cssclass:: table-bordered

===========================================================  ========================================
Optional routine                                             Function name
===========================================================  ========================================
Output all MRIStep solver parameters                         :c:func:`MRIStepWriteParameters()`
Output the current MRI coupling table                        :c:func:`MRIStepWriteCoupling()`
===========================================================  ========================================


.. c:function:: int MRIStepWriteParameters(void* arkode_mem, FILE *fp)

   Outputs all MRIStep solver parameters to the provided file pointer.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *fp* -- pointer to use for printing the solver parameters.

   **Return value:**
      * *ARKS_SUCCESS* if successful
      * *ARKS_MEM_NULL* if the MRIStep memory was ``NULL``

   **Notes:** The *fp* argument can be ``stdout`` or ``stderr``, or it
   may point to a specific file created using ``fopen``.

   When run in parallel, only one process should set a non-NULL value
   for this pointer, since parameters for all processes would be
   identical.


.. c:function:: int MRIStepWriteCoupling(void* arkode_mem, FILE *fp)

   Outputs the current MRI coupling table to the provided file pointer.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *fp* -- pointer to use for printing the Butcher tables.

   **Return value:**
      * *ARK_SUCCESS* if successful
      * *ARK_MEM_NULL* if the MRIStep memory was ``NULL``

   **Notes:** The *fp* argument can be ``stdout`` or ``stderr``, or it
   may point to a specific file created using ``fopen``.

   When run in parallel, only one process should set a non-NULL value
   for this pointer, since tables for all processes would be
   identical.
