# This format is based on the GNU configuration supplied with uncrustify.
# Attempted to match emacs GNU style.  The main difference is braces
#
# uncrustify -c sundials-uncrustify.cfg -f src/cvode/cvode.c -o cvode-uncrustify.c

# ================================
# Begin custom uncrustify settings
# ================================

# Do not indent brace
indent_brace			= 0

# Switch statements looked terrible with indent_brace=0 so indent the
# case statements:
indent_switch_case              = 2

align_func_params               = true

cmt_indent_multi                = true
cmt_star_cont         		= TRUE

# This will align trailing \ on macro defines
align_nl_cont                   = TRUE    # true/false

# Use Unix LF line endings
newlines                        = LF

# Convert all tabs to spaces in comments.
cmt_convert_tab_to_spaces       = True

# align assignments
align_assign_span               = 1

# Add or remove unnecessary parenthesis on 'return' statement.
#mod_paren_on_return             = ignore   # ignore/add/remove/force


# Try to limit code width to N columns.
code_width                      = 80     # unsigned number

# Try to wrap comments at N columns.
cmt_width                       = 80      # unsigned number

# Whether to fully split long function prototypes/calls at commas.
# The option ls_code_width has priority over the option ls_func_split_full.
ls_func_split_full              = true   # true/false

# Whether to split lines as close to code_width as possible and ignore some
# groupings.
# The option ls_code_width has priority over the option ls_func_split_full.
ls_code_width                   = true    # true/false

# Add or remove space between 'return' and '('.
sp_return_paren                 = add     # ignore/add/remove/force

# Don't split one-line function definitions, as in 'int foo() { return 0; }'.
# might modify nl_func_type_name
nl_func_leave_one_liners        = true    # true/false

# Don't split one-line if/else statements, as in 'if(...) b++;'.
nl_if_leave_one_liners          = false    # true/false

# Whether to add a newline after semicolons, except in 'for' statements.
nl_after_semicolon              = true    # true/false

# # Add or remove braces on a single-line 'if' statement. Braces will not be
# # removed if the braced statement contains an 'else'.
# mod_full_brace_if               = add     # ignore/add/remove/force

# Whether to add braces to all blocks of an 'if'/'else if'/'else' chain.
# If true, mod_full_brace_if_chain will only remove braces from an 'if' that
# does not have an 'else if' or 'else'.
mod_full_brace_if_chain_only    = true    # true/false

# The regex for include category with priority 0.
include_category_0              = '^(<|"(gtest|gmock|isl|json)/)'         # string

# The regex for include category with priority 1.
include_category_1              = '.*'         # string

# The regex for include category with priority 2.
include_category_2              = ""         # string

# ================================
# End custom uncrustify settings
# ================================

# This is original Uncrustify GNU format

indent_with_tabs		= 0		# 0 use spaces
input_tab_size			= 8		# original tab size
output_tab_size			= 8		# new tab size
indent_columns			= 2
# indent_label			= 2		# pos: absolute col, neg: relative column
indent_align_string		= False		# align broken strings

nl_enum_brace			= remove	# "enum {" vs "enum \n {"
nl_union_brace			= remove	# "union {" vs "union \n {"
nl_struct_brace			= remove	# "struct {" vs "struct \n {"
nl_do_brace			= add		# "do {" vs "do \n {"
nl_if_brace			= add		# "if () {" vs "if () \n {"
nl_for_brace			= add		# "for () {" vs "for () \n {"
nl_else_brace			= add		# "else {" vs "else \n {"
nl_while_brace			= add		# "while () {" vs "while () \n {"
nl_switch_brace			= add		# "switch () {" vs "switch () \n {"
nl_func_var_def_blk		= 1
nl_before_case			= 1
nl_fcall_brace			= add		# "foo() {" vs "foo()\n{"
nl_fdef_brace			= add		# "int foo() {" vs "int foo()\n{"
# nl_after_return			= TRUE
nl_brace_while			= add
nl_brace_else			= add
nl_squeeze_ifdef		= TRUE

# mod_paren_on_return		= ignore	# "return 1;" vs "return (1);"
# mod_full_brace_if		= ignore	# "if (a) a--;" vs "if (a) { a--; }"
# mod_full_brace_for		= ignore	# "for () a--;" vs "for () { a--; }"
# mod_full_brace_do		= ignore	# "do a--; while ();" vs "do { a--; } while ();"
# mod_full_brace_while		= ignore	# "while (a) a--;" vs "while (a) { a--; }"

sp_before_semi			= remove
sp_paren_paren			= remove	# space between (( and ))
#sp_return_paren			= remove	# "return (1);" vs "return(1);"
sp_sizeof_paren			= remove	# "sizeof (int)" vs "sizeof(int)"
sp_before_sparen		= force		# "if (" vs "if("
sp_after_sparen			= force		# "if () {" vs "if (){"
sp_after_cast			= remove	# "(int) a" vs "(int)a"
sp_inside_braces		= force		# "{ 1 }" vs "{1}"
sp_inside_braces_struct		= force		# "{ 1 }" vs "{1}"
sp_inside_braces_enum		= force		# "{ 1 }" vs "{1}"
sp_inside_paren			= remove
sp_inside_fparen		= remove
sp_inside_sparen		= remove
#sp_type_func			= ignore
sp_assign			= force
sp_arith			= force
sp_bool				= force
sp_compare			= force
sp_after_comma			= force
sp_func_def_paren		= remove	# "int foo (){" vs "int foo(){"
sp_func_call_paren		= remove	# "foo (" vs "foo("
sp_func_proto_paren		= remove	# "int foo ();" vs "int foo();"

indent_func_call_param          = false

indent_var_def_cont=true
indent_func_call_param=false
indent_func_def_param=false
indent_func_proto_param=false
indent_func_class_param=false
indent_func_ctor_var_param=false
indent_template_param=false
indent_paren_nl=true

# align_with_tabs			= FALSE		# use tabs to align
# align_on_tabstop		= FALSE		# align on tabstops
# align_enum_equ_span		= 4
# align_nl_cont			= TRUE
# align_var_def_span		= 2
# align_var_def_inline		= TRUE
# align_var_def_star		= TRUE
# align_var_def_colon		= TRUE
# align_assign_span		= 1
# align_struct_init_span		= 3
# align_var_struct_span		= 3
# align_right_cmt_span		= 3
# align_pp_define_span		= 3
# align_pp_define_gap		= 4
# align_number_left		= TRUE
# align_typedef_span		= 5
# align_typedef_gap		= 3

# cmt_star_cont			= TRUE

eat_blanks_before_close_brace	= TRUE
eat_blanks_after_open_brace	= TRUE
